# SQLSELECT employee_id first_name, last_name
FROM employees;

-- select 위의 열들만 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id first_name, last_name
FROM employees
ORDER BY employee_id DESC;


-- select 위의 열들만 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id first_name || last_name
FROM employees;

-- 두개열을 붙여서 하나의 데이터 값으로 나타낸다.

SELECT employee_id first_name || ' ' || last_name,
       emalil||'@"||'company.com'
FROM employees;

-- 두개열을 붙여서 하나의 데이터 값으로 나타낸다.
-- 가운데 한칸 띄기

SELECT employee_id AS 사원번호
       salary AS 급여,
       salary+500 AS 추가급여,
       salary-100 AS 인하급여,
       (salary * 1.1)/2 AS 조정급여
FROM employees;

-- 열이름을 별명으로 잠시 보여때만 사용된다.

SELECT *
FROM employees
WHERE employee_id = 100;

-- 아이디가 100인 사람의 정보만 출력

SELECT *
FROM employees
WHERE first_name

SELECT *
FROM employees
WHERE salary BETWEEN 100000 AND 200000;

-- BETWEEN a AND b 와 b사이의 수 >= <=

SELECT *
FROM employees
WHERE salary IN(100000, 170000, 240000);

-- IN =와 유사하지만 =은 하나만 조건으로 지정하고 IN은 값을 여러개 설정



SELECT *
FROM employees
WHERE job_id LIKE 'AD%';

--LIKE는 명확하지 않은 조건으로 찾을떄
-- ~처럼 ~같은
-- 조건에는 문자나 숫자를 포함할수 있다
-- % 모든 문자 또는 한글자 라는 의미이다.

SELECT *
FROM employees
WHERE manager_id IS NULL;

--데이터 값이 NULL 인 경우를 조회

SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

--조건을 모두 충족하는 데이터를 검색
-- and를 계속 붙여 추가 가능

SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR job_id = 'FI_ACCOUNT';

--조건을 모두 충족하는 데이터를 검색
-- and를 계속 붙여 추가 가능

SELECT *
FROM employees
WHERE employee_id <> 105;

-- <> 아니다. !=


SELECT *
FROM employees
WHERE manager_id IS NOT NULL;

-- IS NULL <> IS NOT NULL

SELECT last_name,
        LOWER(last_name) LOWER적용,
        UPPER(last_name) UPPER적용,
        email,
        INITCAP(email) INITACP적용
FROM employees;

-- employee 테이블에서 last_name을 소문자와 대문자로 출력
-- email은 첫 글자만 대문자로 출력

SELECT job-id,
        SUBSTR(job_id,1,2)
FROM employees;

-- employee 테이블에서 JOB_ID 값의 첫 자리부터 두개 문자 출력


SELECT first_name,
        LPAD(first_name, 12,' ') 적용결과
FROM employees;

--first_name 값에서 12자리로 만들고 나머지를 어떤 문자로 채운다

SELECT job_id,
        LTRIM(job_id, 'F') 적용결과,
        RTRIM(job_id, 'T')
FROM employees;

--글자를 만나면 삭제
